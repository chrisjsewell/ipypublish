# -*- coding: utf-8 -*-
#
# ipypublish documentation build configuration file, created by
# sphinx-quickstart on Sat Jun  3 02:06:22 2017.
#
# http://www.sphinx-doc.org/en/master/usage/configuration.html
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import io
import sys
import urllib
import json

from sphinx.application import Sphinx  # noqa

on_rtd = os.environ.get('READTHEDOCS') == 'True'

# sys.path.insert(0, os.path.abspath('.'))
sys.path.insert(0, os.path.abspath('../..'))
import ipypublish

# TODO run script api/run_apidoc automatically

if on_rtd:
    # create releases page
    git_history = urllib.request.urlopen(
        'https://api.github.com/repos/chrisjsewell/ipypublish/releases'
    ).read().decode('utf-8')
    # NOTE on vscode this could fail with urllib.error.HTTPError
    git_history_json = json.loads(git_history)
    # NOTE on vscode this was failing unless encoding='utf8' was present
    with io.open('releases.md', 'w', encoding="utf8") as f:
        f.write('# Releases\n')
        f.write('\n')
        for r in git_history_json:
            subtitle = '## ' + ' '.join([r['tag_name'], '-', r['name'], '\n'])
            f.write(subtitle)
            f.write('\n')
            for line in r['body'].split('\n'):
                f.write(' '.join([line, '\n']))
            f.write('\n')

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = ['sphinx.ext.autodoc',
              'sphinx.ext.doctest',
              'sphinx.ext.intersphinx',
              'sphinx.ext.todo',
              'sphinx.ext.coverage',
              'sphinx.ext.mathjax',
              'sphinx.ext.ifconfig',
              'sphinx.ext.viewcode',
              'sphinx.ext.githubpages',  # TODO is this needed?
              'sphinx.ext.napoleon',
              'sphinx.ext.autosummary']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
source_parsers = {
    '.md': 'recommonmark.parser.CommonMarkParser',
}
source_suffix = ['.rst', '.md']
# source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'ipypublish'
copyright = u'2017, Chris Sewell'
author = u'Chris Sewell'
description = ('Create quality publication and presentation'
               'directly from Jupyter Notebook(s)')

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = ipypublish.__version__
# The full version, including alpha/beta/rc tags.
release = ipypublish.__version__

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
# html_theme = 'alabaster'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']
# html_logo = '_static/doc_icon_100px.png'
html_favicon = '_static/doc_icon_32px.ico'

# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'ipypublishdoc'

# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'ipypublish.tex', u'ipypublish Documentation',
     u'Chris Sewell', 'manual'),
]

# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'ipypublish', u'ipypublish Documentation',
     [author], 1)
]

# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'ipypublish', u'IPyPublish',
     author, 'ipypublish', description,
     'Miscellaneous'),
]

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {
    'python': ('https://docs.python.org/3.6', None),
    # 'numpy': ('http://docs.scipy.org/doc/numpy/', None),
    # 'scipy': ('http://docs.scipy.org/doc/scipy/reference/', None),
    # 'matplotlib': ('http://matplotlib.sourceforge.net/', None),
    # 'pandas': ('http://pandas.pydata.org/pandas-docs/stable/', None),
    # 'IPython': ('http://ipython.org/ipython-doc/stable/', None),
    'PIL': ('http://pillow.readthedocs.org/en/latest/', None),
    'nbconvert': ("http://nbconvert.readthedocs.io/en/latest/", None),
    'nbformat': ("http://nbformat.readthedocs.io/en/latest/", None),
    'tornado': ("https://www.tornadoweb.org/en/stable/", None),
    'traitlets': ("https://traitlets.readthedocs.io/en/stable/", None),
    'jinja': ('http://jinja.pocoo.org/docs/dev', None)
}

intersphinx_aliases = {
    ('py:class', 'nbconvert.preprocessors.base.Preprocessor'):
        ('py:class', 'nbconvert.preprocessors.Preprocessor'),
    ('py:class', 'nbformat.notebooknode.NotebookNode'):
        ('py:class', 'nbformat.NotebookNode')
}


def add_intersphinx_aliases_to_inv(app):
    """see https://github.com/sphinx-doc/sphinx/issues/5603"""
    from sphinx.ext.intersphinx import InventoryAdapter
    inventories = InventoryAdapter(app.builder.env)

    for alias, target in app.config.intersphinx_aliases.items():
        alias_domain, alias_name = alias
        target_domain, target_name = target
        try:
            found = inventories.main_inventory[target_domain][target_name]
            try:
                inventories.main_inventory[alias_domain][alias_name] = found
            except KeyError:
                continue
        except KeyError:
            continue


# Napoleon settings
napoleon_numpy_docstring = True
napoleon_include_private_with_doc = False
napoleon_include_special_with_doc = False
napoleon_use_admonition_for_examples = False
napoleon_use_admonition_for_notes = False
napoleon_use_admonition_for_references = False
napoleon_use_ivar = True
napoleon_use_param = True
napoleon_use_rtype = True


def setup(app):
    # type: (Sphinx) -> dict
    """
    extension for sphinx 
    to genrate add an autofuncsummary directive

    adapted from 
    https://github.com/markovmodel/PyEMMA/blob/devel/doc/source/conf.py#L285
    and discussed here:
    https://stackoverflow.com/questions/20569011/python-sphinx-autosummary-automated-listing-of-member-functions
    """

    # app.connect('autodoc-skip-member', skip_deprecated)

    app.add_config_value('intersphinx_aliases', {}, 'env')
    app.connect('builder-inited', add_intersphinx_aliases_to_inv)

    try:
        from sphinx.ext.autosummary import Autosummary
        # from sphinx.ext.autosummary import get_documenter
        from docutils.parsers.rst import directives
        # from sphinx.util.inspect import safe_getattr
        # import re
        import inspect
        from types import FunctionType

        class AutoFunctionSummary(Autosummary):

            option_spec = {
                'functions': directives.unchanged,
                'classes': directives.unchanged,
                'toctree': directives.unchanged,
                'nosignatures': directives.unchanged
            }

            required_arguments = 1

            @staticmethod
            def get_functions(mod):

                def is_function_local(obj):
                    return (isinstance(obj, FunctionType) and
                            obj.__module__ == mod.__name__)

                members = inspect.getmembers(mod, predicate=is_function_local)
                return [name for name, value in members
                        if not name.startswith('_')]

            @staticmethod
            def get_classes(mod):

                def is_class_local(obj):
                    return (inspect.isclass(obj)
                            and obj.__module__ == mod.__name__)

                members = inspect.getmembers(mod, predicate=is_class_local)
                return [name for name, value in members
                        if not name.startswith('_')]

            def run(self):

                mod_path = self.arguments[0]

                (package_name, mod_name) = mod_path.rsplit('.', 1)
                pkg = __import__(package_name, globals(), locals(), [mod_name])
                mod = getattr(pkg, mod_name)

                if 'classes' in self.options:
                    klasses = self.get_classes(mod)
                    self.content = ["~%s.%s" % (mod_path, klass)
                                    for klass in klasses
                                    if not klass.startswith('_')]
                if 'functions' in self.options:
                    functions = self.get_functions(mod)
                    content = ["~%s.%s" % (mod_path, func)
                               for func in functions
                               if not func.startswith('_')]
                    if self.content:
                        self.content += content
                    else:
                        self.content = content
                try:
                    pass
                finally:
                    return super(AutoFunctionSummary, self).run()

        app.add_directive('autofuncsummary', AutoFunctionSummary)
    except BaseException as e:
        raise e


# Warnings to ignore when using the -n (nitpicky) option
# We should ignore any python built-in exception, for instance
nitpick_ignore = [('py:exc', 'ArithmeticError'), ('py:exc', 'AssertionError'),
                  ('py:exc', 'AttributeError'), ('py:exc', 'BaseException'),
                  ('py:exc', 'BufferError'), ('py:exc', 'DeprecationWarning'),
                  ('py:exc', 'EOFError'), ('py:exc', 'EnvironmentError'),
                  ('py:exc', 'Exception'), ('py:exc', 'FloatingPointError'),
                  ('py:exc', 'FutureWarning'), ('py:exc', 'GeneratorExit'),
                  ('py:exc', 'IOError'), ('py:exc', 'ImportError'),
                  ('py:exc', 'ImportWarning'), ('py:exc', 'IndentationError'),
                  ('py:exc', 'IndexError'), ('py:exc', 'KeyError'),
                  ('py:exc', 'KeyboardInterrupt'), ('py:exc', 'LookupError'),
                  ('py:exc', 'MemoryError'), ('py:exc', 'NameError'),
                  ('py:exc', 'NotImplementedError'), ('py:exc', 'OSError'),
                  ('py:exc', 'OverflowError'),
                  ('py:exc', 'PendingDeprecationWarning'),
                  ('py:exc', 'ReferenceError'), ('py:exc', 'RuntimeError'),
                  ('py:exc', 'RuntimeWarning'), ('py:exc', 'StandardError'),
                  ('py:exc', 'StopIteration'), ('py:exc', 'SyntaxError'),
                  ('py:exc', 'SyntaxWarning'), ('py:exc', 'SystemError'),
                  ('py:exc', 'SystemExit'), ('py:exc', 'TabError'),
                  ('py:exc', 'TypeError'), ('py:exc', 'UnboundLocalError'),
                  ('py:exc', 'UnicodeDecodeError'),
                  ('py:exc', 'UnicodeEncodeError'), ('py:exc', 'UnicodeError'),
                  ('py:exc', 'UnicodeTranslateError'),
                  ('py:exc', 'UnicodeWarning'), ('py:exc', 'UserWarning'),
                  ('py:exc', 'VMSError'), ('py:exc', 'ValueError'),
                  ('py:exc', 'Warning'), ('py:exc', 'WindowsError'),
                  ('py:exc', 'ZeroDivisionError'), ('py:obj', 'str'),
                  ('py:obj', 'list'),
                  ('py:obj', 'tuple'),
                  ('py:obj', 'int'),
                  ('py:obj', 'float'),
                  ('py:obj', 'bool'),
                  ('py:obj', 'Mapping'),
                  ('py:obj', 'MutableMapping'),
                  ('py:func', 'str.format'),
                  ('py:class', '_abcoll.MutableMapping'),
                  ('py:class',
                   'traitlets.config.configurable.LoggingConfigurable')]
